#include <stdio.h>
#include <stdlib.h>
#include "Transporte.h"
#include "Tipo.h"
#include "HojaDeRuta.h"
#include "Validaciones.h"

/**
*\brief: Otorga un ID autoincremental.
*\param: ---
*\return: Retorna el id autoincrementado.
**/
int idHojaDeRuta() {

	static int idHojaDeRuta = 20000;
	idHojaDeRuta++;

	return idHojaDeRuta;
}

/**
*\brief: Inicia el campo isEmpty del array de tipo hojaDeRuta en 0.
*\param: Array de tipo hojaDeRUTA, longitud del Array.
*\return: Retorna 1 si funciono y 0 si ocurre algun error.
**/
int inicializarHojaDeRuta(hojaDeRuta eHojasDeRuta[], int longitudHojasDeRuta) {

	int retorno = 0;

	if (eHojasDeRuta != NULL && longitudHojasDeRuta > 0) {

		for (int i = 0; i < longitudHojasDeRuta; i++) {

			eHojasDeRuta[i].isEmpty = 0; //0 vacio 1 llongitudHojasDeRutao.
		}

		retorno = 1;

	}
	return retorno;
}

/**
*\brief: Recorre un array de tipo hojaDeRuta buscando algun espacio vacio. (isEmpty = 0)
*\param: Array de tipo hojaDeRuta, longitud del array.
*\return: Retorna el indice vacio  y -1 si no encontro.
**/
int buscarVacioeHojasDeRuta(hojaDeRuta eHojasDeRuta[], int longitudHojasDeRuta) {

	int retorno = -1;

	if (eHojasDeRuta != NULL && longitudHojasDeRuta > 0) {

		for (int i = 0; i < longitudHojasDeRuta; i++) {

			if (eHojasDeRuta[i].isEmpty == 0) {

				retorno = i; //ya encontre vacio, break.
				break;
			}
		}
	}

	return retorno;
}

/**
*\brief: Carga datos en el array de tipo hojaDeRuta.
*\param: Array de tipo hojaDeRuta, longitud del array.
*\return: Retorna 1 si encontro espacio y 0 si no encontro.
**/
int darAltaHojaDeRuta(hojaDeRuta eHojasDeRuta[], transporte transportes[], int longitudHojasDeRuta,
		int longitudTransportes) {

	int retorno = 0;
	int confirm;
	int indice;
	int validacion;
	hojaDeRuta auxeHojasDeRuta;

	if (eHojasDeRuta != NULL && transportes != NULL && longitudHojasDeRuta > 0 && longitudTransportes > 0) {

		do {
			indice = buscarVacioeHojasDeRuta(eHojasDeRuta, longitudHojasDeRuta);

			if (indice != -1) {

				mostrarDatos(transportes, longitudTransportes);
				system("pause");

				getNumber(&auxeHojasDeRuta.transporteId,
						"\nSeleccione un transporte por su ID: ",
						"Ese transporte no existe\n", 1000, 9999);

				validacion = buscarIdTransporte(transportes, longitudTransportes, auxeHojasDeRuta.transporteId);

				if (validacion == 1) {

					auxeHojasDeRuta.idHoja = idHojaDeRuta() - 1;

					getNumber(&auxeHojasDeRuta.fecha.dia, "\nIngrese dia: ",
							"Fecha no valida", 1, 31);

					getNumber(&auxeHojasDeRuta.fecha.mes, "\nIngrese mes: ",
							"Fecha no valida", 1, 12);

					getNumber(&auxeHojasDeRuta.fecha.anio, "\nIngrese anio: ",
							"Fecha no valida", 1, 22);

					getFloat(&auxeHojasDeRuta.kmsTotales,
							"\nIngrese cantidad de kilometros: ",
							"kilometros no validos\n", 50, 4000);

					getFloat(&auxeHojasDeRuta.precioViaje,
							"\nIngrese el precio del viaje: ",
							"Precio No valido\n", 1000, 999999);

					auxeHojasDeRuta.isEmpty = 1;

				}else{

					printf("\nEse ID no existe\n");
					system("pause");
				}
			}

		}while(validacion != 1);

		do{

			mostrarUnaHojaDeRUTA(auxeHojasDeRuta);
			getNumber(&confirm,
					"\nIngrese 1 si su seleccion es correcta o 0 si desea volver a elegir\nOpcion: ",
					"\nOpcion no valida", 0, 1);

		}while(confirm != 1);

		eHojasDeRuta[indice] = auxeHojasDeRuta;
		retorno = 1;
	}
	return retorno;
}

/**
*\brief: Muestra los datos cargados en el array de tipo hojaDeRuta.
*\param: Array de tipo hojaDeRuta, longitud del array.
*\return: Retorna 1 si puede mostrar, Retorna 0 si ocurrio un error.
**/
int mostrarHojaDeRuta(hojaDeRuta eHojasDeRuta[], int longitudHojasDeRuta) {

	int retorno = 0;

	if(eHojasDeRuta != NULL && longitudHojasDeRuta > 0){
		for (int i = 0; i < longitudHojasDeRuta; i++) {

			if (eHojasDeRuta[i].isEmpty == 1) {

				printf("\nid Hoja de ruta: %d\n", eHojasDeRuta[i].idHoja);
				printf("id transporte: %d\n", eHojasDeRuta[i].transporteId);
				printf("Kilometros: %.2f\n", eHojasDeRuta[i].kmsTotales);
				printf("Precio de viaje: %.2f\n", eHojasDeRuta[i].precioViaje);
				printf("fecha: %d / %d /%d \n", eHojasDeRuta[i].fecha.dia,
						eHojasDeRuta[i].fecha.mes, eHojasDeRuta[i].fecha.anio);
			}
		}
		retorno = 1;
	}

	return retorno;
}

/**
*\brief: Muestra los campos de la variable de tipo hojaDeRuta.
*\param: Variable de tipo hojaDeRuta.
*\return: VOID
**/
void mostrarUnaHojaDeRUTA(hojaDeRuta eHojasDeRuta){

		printf("\nID Hoja de ruta: %d\n", eHojasDeRuta.idHoja);
		printf("ID transporte: %d\n", eHojasDeRuta.transporteId);
		printf("Kilometros: %.2fKM\n", eHojasDeRuta.kmsTotales);
		printf("Precio de viaje: $%.2f\n", eHojasDeRuta.precioViaje);
		printf("fecha: %d / %d /%d \n", eHojasDeRuta.fecha.dia, eHojasDeRuta.fecha.mes,
				eHojasDeRuta.fecha.anio);
}

/**
*\brief: Verifica que haya espacio para cargar un nuevo dato de tipo hojaDeRuta.
*\param: Array de tipo hojaDeRuta, Longitud del array.
*\return: Retorna 1 si encuentra espacio, Retorna 0 si no lo encuentra.
**/
int buscarEspacioHojaDeRuta(hojaDeRuta eHojasDeRuta[], int longitudHojasDeRuta){

	int retorno = 0;

	if(eHojasDeRuta != NULL && longitudHojasDeRuta > 0){
		for(int i = 0; i < longitudHojasDeRuta; i++){

			if(eHojasDeRuta[i].isEmpty == 0){

				retorno = 1;
				break;
			}
		}
	}

	return retorno;
}
