#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Transporte.h"
#include "Validaciones.h"

int inicializarTransporte(transporte transportes[], int len) {

	int retorno = 0;

	if (transportes != NULL && len > 0) {

		for (int i = 0; i < len; i++) {

			transportes[i].isEmpty = 0; //0 vacio 1 lleno.
		}

		retorno = 1;
	}

	return retorno;
}

int buscarVacio(transporte transportes[], int len) {

	int retorno = -1;

	if (transportes != NULL && len > 0) {

		for (int i = 0; i < len; i++) {

			if (transportes[i].isEmpty == 0) {

				retorno = i; //ya encontre vacio, break.
				break;
			}

		}

	}

	return retorno;
}

int darAltaTransporte(transporte transportes[], int len) {

	int retorno = -1;
	int indice;
	transporte auxtransporte;

	if (transportes != NULL && len > 0) {

		indice = buscarVacio(transportes, len);

		if (indice != -1) {

			//getNumber(&auxtransporte.idTransporte, "Ingrese idtransporte: \n", "Ingrese un numero entre 1000 y 9999: \n",
			//	1000, 9999);
			auxtransporte.idTransporte = idTransportes() - 1;
			getString(auxtransporte.descripcion, "\nIngrese descripcion: ",
					"Se paso de texto", 1024);

			getNumber(&auxtransporte.pesoCarga, "\nIngrese el pesoCarga: ",
					"Imposible llevar esos KG", 50, 100000);

			getNumber(&auxtransporte.cantidadBultos,
					"\nIngrese cantidadBultos:",
					"Imposible llevar esa cantidad de bultos", 1, 1000);

			getNumber(&auxtransporte.tipoId, "\nIngrese tipoId:\n"
					"1000: 'CAMION RECTO'\n"
					"1001: 'CAMION REMOLQUE'\n"
					"1002: 'CAMION SEMIRREMOLQUE'\n"
					"1003: 'CAMION ELEVADOR'", "ID No valido", 1000, 1003);

			auxtransporte.isEmpty = 1;

		}
		//confirmar antes de dar alta
		transportes[indice] = auxtransporte;

	}

	return retorno;
}

void mostrarDatos(transporte transporte[], int len) {

	for (int i = 0; i < len; i++) {

		if (transporte[i].isEmpty == 1) {

			printf("\nid transporte es: %d\n", transporte[i].idTransporte);
			printf("descripcion es: %s\n", transporte[i].descripcion);
			printf("pesoCarga es: %d\n", transporte[i].pesoCarga);
			printf("cantidadBultos es: %d\n", transporte[i].cantidadBultos);

			switch (transporte[i].tipoId) {

			case 1000:
				printf("tipoId: %d 'CAMION RECTO'\n", transporte[i].tipoId);
				break;

			case 1001:
				printf("tipoId: %d 'CAMION REMOLQUE'\n", transporte[i].tipoId);
				break;

			case 1002:
				printf("tipoId: %d 'CAMION SEMIRREMOLQUE'\n",
						transporte[i].tipoId);
				break;

			case 1003:
				printf("tipoId: %d 'CAMION ELEVADOR'\n", transporte[i].tipoId);
				break;
			}

		}
	}
}

int idTransportes() {

	static int idT = 1000;
	idT++;

	return idT;
}

int buscarIdDeTransporte(transporte transportes[], int len, int id) {

	int retorno = -1;

	if (transportes != NULL && len > 0 && id > 0) {

		for (int i = 0; i < len; i++) {

			if (transportes[i].idTransporte == id) {

				retorno = i; //ya encontre el id, break.
				break;
			}

		}
	}

	return retorno;
}

int darBajaTransporte(transporte transportes[], int len) {

	int retorno = -1;
	int id;
	int indice;

	if (transportes != NULL && len > 0) {

		printf("\nQue id quiere dar de baja?: ");

		listarTransportes(transportes, len);

		getNumber(&id, "\nNumero: ", "Numero no valido\nReingrese El ID", 1000,
				9999);
		indice = buscarIdDeTransporte(transportes, len, id);
		//agregar otra validacion si esta seguro y mostrar un printf se dio de baja exitosamente.
		if (indice != -1) {

			transportes[indice].isEmpty = 0;
		}
	}

	return retorno;
}

int listarTransportes(transporte transportes[], int len) {

	int retorno = -1;

	if (transportes != NULL && len > 0) {

		printf("Los transportes actuales son: \n");

		for (int i = 0; i < len; i++) {

			if (transportes[i].isEmpty == 1) {

				printf("ID: %d\n", transportes[i].idTransporte);
			}
		}
		retorno = 0;
	}

	return retorno;
}
int modificartransporte(transporte transportes[], int len) {

	int retorno = -1;
	int id;
	int indice;
	int opcion;

	if (transportes != NULL && len > 0) {

		printf("\nQue id quiere modificar: ");
		listarTransportes(transportes, len);
		scanf("%d", &id);

		indice = buscarIdDeTransporte(transportes, len, id);

		if (indice == -1) {
			printf("No se encontro el id");
			system("pause");
		} else {

			getNumber(&opcion, "\nÂ¿Que opcion desea modificar?\n"
					"1-PesoCarga\n"
					"2-CantidadBultos\n"
					"3-Ambos\n"
					"4-Volver\n"
					"opcion: ", "Opcion no valida", 1, 4);

			switch (opcion) {

			case 1:
				printf("Ingrese precio: \n");
				scanf("%d", &transportes[indice].pesoCarga);
				break;

			case 2:
				printf("Ingrese tipo: \n");
				scanf("%d", &transportes[indice].cantidadBultos);
				break;

			case 3:
				printf("Ingrese precio: \n");
				scanf("%d", &transportes[indice].pesoCarga);
				printf("Ingrese tipo: \n");
				scanf("%d", &transportes[indice].cantidadBultos);
				break;

			}

		}
	}

	return retorno;
}

int orderStructByID(transporte transportes[], int len) {

	int flagSwapId;
	int i;
	int retorno = 0;
	transporte buffer;

	if (transportes != NULL && len > 0) {

		do {
			flagSwapId = 0;

			for (i = 0; i < len - 1; i++) {

				if (transportes[i].tipoId > transportes[i + 1].tipoId) {

					flagSwapId = 1;
					buffer = transportes[i];
					transportes[i] = transportes[i + 1];
					transportes[i + 1] = buffer;

				}

			}

		} while (flagSwapId);

		retorno = 1;
	}

	return retorno;
}

int orderStructByDes(transporte transportes[], int len){

	int retorno = 0;
	int flagSwapDes;
	transporte buffer;


	do{
		flagSwapDes = 0;

		for (int j = 0; j < len - 1; j++) {

			for(int i = 0; i < len -1; i++){

				if (transportes[j].tipoId == transportes[i + 1].tipoId){

					if (strcmp(transportes[j].descripcion, transportes[i+1].descripcion) > 0) {

						flagSwapDes = 1;
						buffer = transportes[j];
						transportes[j] = transportes[i + 1];
						transportes[i + 1] = buffer;

					}
				}
			}

		}

	}while(flagSwapDes);

	return retorno;
}
